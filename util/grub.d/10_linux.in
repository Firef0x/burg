#! /bin/sh -e

# grub-mkconfig helper script.
# Copyright (C) 2006,2007,2008,2009,2010  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
. ${libdir}/burg/burg-mkconfig_lib

export TEXTDOMAIN=@PACKAGE@
export TEXTDOMAINDIR=@localedir@

CLASS="--class gnu-linux --class gnu --class os"

if [ "x${GRUB_DISTRIBUTOR}" = "x" ] ; then
  OS=Linux
  OSLABEL=linux
else
  OS="${GRUB_DISTRIBUTOR} Linux"
  OSLABEL="$(echo ${GRUB_DISTRIBUTOR} | tr '[A-Z]' '[a-z]' | cut -d' ' -f1)"
fi

CLASS="--class ${OSLABEL} ${CLASS}"
export AUTH_NORMAL AUTH_RESCUE
get_auth_option ${OSLABEL}

# loop-AES arranges things so that /dev/loop/X can be our root device, but
# the initrds that Linux uses don't like that.
case ${GRUB_DEVICE} in
  /dev/loop/*|/dev/loop[0-9])
    GRUB_DEVICE=`losetup ${GRUB_DEVICE} | sed -e "s/^[^(]*(\([^)]\+\)).*/\1/"`
  ;;
esac

if [ "x${GRUB_DEVICE_UUID}" = "x" ] || [ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ] \
    || ! test -e "/dev/disk/by-uuid/${GRUB_DEVICE_UUID}" ; then
  LINUX_ROOT_DEVICE=${GRUB_DEVICE}
else
  LINUX_ROOT_DEVICE="/dev/disk/by-uuid/${GRUB_DEVICE_UUID}"
fi

linux_entry ()
{
  os="$1"
  version="$2"
  type="$3"
  args="$4"

  if [ x${type} != xsimple ]; then
    case ${type} in
		recovery)
			title="$(gettext_printf "%s, with Linux %s (recovery mode)" "${os}" "${version}")" ;;
		fallback)
			title="$(gettext_printf "%s, with Linux %s (fallback)" "${os}" "${version}")" ;;
		*)
			title="$(gettext_printf "%s, with Linux %s" "${os}" "${version}")" ;;
	esac
  else
	title="$(gettext_printf "%s, with Linux %s" "${os}" "${version}")"
  fi
  echo "menuentry '$(echo ${title} | grub_quote)' ${CLASS} --group group_main ${auth_option}{\n"
  if [ x${type} != xrecovery ] ; then
	  save_default_entry | grub_add_tab
  fi

  # Use ELILO's generic "efifb" when it's known to be available.
  # FIXME: We need an interface to select vesafb in case efifb can't be used.
  if [ "x$GRUB_GFXPAYLOAD_LINUX" != x ]; then
#      if grep -qx "CONFIG_FB_EFI=y" /boot/config-${version} 2> /dev/null \
#	  && grep -qx "CONFIG_VT_HW_CONSOLE_BINDING=y" /boot/config-${version} 2> /dev/null; then
#	  cat << EOF
#	set gfxpayload=keep
#EOF
#      fi
#  else
	  cat << EOF
	set gfxpayload=$GRUB_GFXPAYLOAD_LINUX
EOF
  fi

  if [ -z "${prepare_boot_cache}" ]; then
    prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | sed -e "s/^/\t/")"
  fi
  printf '%s\n' "${prepare_boot_cache}"
  cat << EOF
	echo	'$(printf "$(gettext_quoted "Loading Linux %s ...")" ${version})'
	linux${GRUB_LINUX16}	${rel_dirname}/${basename} root=${linux_root_device_thisversion} rw ${args}
EOF
  if test -n "${initrd}" ; then
	# TRANSLATORS: ramdisk isn't identifier. Should be translated.
	message="$(gettext_printf "Loading initial ramdisk ...")"
    cat << EOF
	echo	'$(echo "${message}" | grub_quote)'
	initrd${GRUB_LINUX16}	${rel_dirname}/${initrd}
EOF
  fi
  cat << EOF
}
EOF
}

list=`for i in $( find / /boot -maxdepth 1 -name 'vmlinu[xz]*' ! -type l ) ; do
        if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
      done`
prepare_boot_cache=

while [ "x$list" != "x" ] ; do
  linux=`version_find_latest $list`
  gettext_printf "Found linux image: %s\n" "$linux" >&2
  basename=`basename $linux`
  dirname=`dirname $linux`
  rel_dirname=`make_system_path_relative_to_its_root $dirname`
  version=`file $linux | awk '{match($0,/version [0-9a-zA-Z.-]*/);print substr($0,RSTART+8,RLENGTH-8);}'`
  echo $basename | grep -q 'vmlinu[xz]26' && initname=kernel || initname=initramfs
  base_init=`echo $basename | sed -e "s,vmlinu[xz],$initname,g"`
  alt_version="${base_init}-fallback"
  linux_root_device_thisversion="${LINUX_ROOT_DEVICE}"

  initrd=
  for i in "${base_init}.img"; do
    if test -e "${dirname}/${i}" ; then
      initrd="$i"
      break
    fi
  done
  if test -n "${initrd}" ; then
    gettext_printf "Found initrd image: %s\n" "${dirname}/${initrd}" >&2
  else
    # "UUID=" magic is parsed by initrds.  Since there's no initrd, it can't work here.
    linux_root_device_thisversion=${GRUB_DEVICE}
  fi

  linux_entry "${OS}" "${version}" simple \
      "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT} init=/usr/lib/systemd/systemd"
  initrd="${alt_version}.img"
  version=`file $linux | awk '{match($0,/version [0-9a-zA-Z.-]*/);print substr($0,RSTART+8,RLENGTH-8);}'`
  linux_entry "${OS}" "${version}" fallback \
      "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT} init=/usr/lib/systemd/systemd"
  if [ "x${GRUB_DISABLE_LINUX_RECOVERY}" != "xtrue" ]; then
    linux_entry "${OS}" "${version}" recovery \
	"systemd.unit=rescue init=/usr/lib/systemd/systemd ${GRUB_CMDLINE_LINUX}"
  fi

  list=`echo $list | tr ' ' '\n' | grep -vx $linux | tr '\n' ' '`
done
