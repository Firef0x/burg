#! /bin/sh

# Install GRUB on your drive.
# Copyright (C) 1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

# Initialize some variables.
transform="@program_transform_name@"

prefix=@prefix@
exec_prefix=@exec_prefix@
sbindir=@sbindir@
bindir=@bindir@
libdir=@libdir@
PACKAGE_NAME=@PACKAGE_NAME@
PACKAGE_TARNAME=@PACKAGE_TARNAME@
PACKAGE_VERSION=@PACKAGE_VERSION@
target_cpu=@target_cpu@
platform=@platform@
host_os=@host_os@
font=@datadir@/@PACKAGE_TARNAME@/ascii.pf2
pkglibdir=${libdir}/`echo ${PACKAGE_TARNAME}/${target_cpu}-${platform} | sed ${transform}`
localedir=@datadir@/locale

self=`basename $0`

grub_setup=${sbindir}/`echo burg-setup | sed ${transform}`
grub_mkimage=${bindir}/`echo burg-mkimage | sed ${transform}`
grub_mkdevicemap=${sbindir}/`echo burg-mkdevicemap | sed ${transform}`
grub_probe=${sbindir}/`echo burg-probe | sed ${transform}`
grub_editenv=${bindir}/`echo burg-editenv | sed ${transform}`
rootdir=
grub_prefix=`echo /boot/burg | sed ${transform}`
modules=

install_device=
no_floppy=
force_lba=
recheck=no
debug=no

if [ "${target_cpu}-${platform}" = "i386-pc" ] ; then
    disk_module=biosdisk
elif [ "${target_cpu}-${platform}" = "sparc64-ieee1275" ] ; then
    disk_module=
else
    disk_module=ata
fi

# Usage: usage
# Print the usage.
usage () {
    cat <<EOF
Usage: $self [OPTION] install_device
Install GRUB on your drive.

  -h, --help              print this message and exit
  -v, --version           print the version information and exit
  --modules=MODULES       pre-load specified modules MODULES
  --root-directory=DIR    install GRUB images under the directory DIR
                          instead of the root directory
  --burg-setup=FILE       use FILE as burg-setup
  --burg-mkimage=FILE     use FILE as burg-mkimage
  --burg-mkdevicemap=FILE use FILE as burg-mkdevicemap
  --burg-probe=FILE       use FILE as burg-probe
  --no-floppy             do not probe any floppy drive
  --recheck               probe a device map even if it already exists
  --force                 install even if problems are detected
  --alt                   alternative setup mode
EOF
if [ "${target_cpu}-${platform}" = "i386-pc" ] ; then
    cat <<EOF
  --disk-module=MODULE    disk module to use
EOF
fi
if [ "${target_cpu}-${platform}" = "mips-yeeloong" ] ; then
    cat <<EOF
  --font=FILE             font file to use
EOF
fi
    cat <<EOF

INSTALL_DEVICE can be a BURG device name or a system device filename.

$self copies BURG images into /boot/burg (or /burg on NetBSD and
OpenBSD), and uses burg-setup to install grub into the boot sector.

If the --root-directory option is used, then $self will copy
images into the operating system installation rooted at that directory.

Report bugs to <bean123ch@gmail.com>.
EOF
}

# Check the arguments.
for option in "$@"; do
    case "$option" in
    -h | --help)
	usage
	exit 0 ;;
    -v | --version)
	echo "$self (${PACKAGE_NAME} ${PACKAGE_VERSION})"
	exit 0 ;;
    --modules=*)
	modules=`echo "$option" | sed 's/--modules=//'` ;;
    --font=*)
	font=`echo "$option" | sed 's/--font=//'` ;;
    --root-directory=*)
	rootdir=`echo "$option" | sed 's/--root-directory=//'` ;;
    --burg-setup=*)
	grub_setup=`echo "$option" | sed 's/--burg-setup=//'` ;;
    --burg-mkimage=*)
	grub_mkimage=`echo "$option" | sed 's/--burg-mkimage=//'` ;;
    --burg-mkdevicemap=*)
	grub_mkdevicemap=`echo "$option" | sed 's/--burg-mkdevicemap=//'` ;;
    --burg-probe=*)
	grub_probe=`echo "$option" | sed 's/--burg-probe=//'` ;;
    --no-floppy)
	no_floppy="--no-floppy" ;;
    --recheck)
	recheck=yes ;;
    --disk-module=*)
	if [ "${target_cpu}-${platform}" = "i386-pc" ] ; then
           disk_module=`echo "$option" | sed 's/--disk-module=//'`
        fi ;;
    # This is an undocumented feature...
    --debug)
	debug=yes ;;
    -f | --force)
        setup_force="--force" ;;
    --alt)
        setup_alt="--alt" ;;
    -*)
	echo "Unrecognized option \`$option'" 1>&2
	usage
	exit 1
	;;
    *)
	if test "x$install_device" != x; then
	    echo "More than one install_devices?" 1>&2
	    usage
	    exit 1
	fi
	install_device="${option}" ;;
    esac
done

# for make_system_path_relative_to_its_root()
. ${libdir}/burg/burg-mkconfig_lib

if test "x$install_device" = x && test "${target_cpu}-${platform}" != "mips-yeeloong"; then
    echo "install_device not specified." 1>&2
    usage
    exit 1
fi

# If the debugging feature is enabled, print commands.
setup_verbose=
if test $debug = yes; then
    set -x
    setup_verbose="--verbose"
fi

# Initialize these directories here, since ROOTDIR was initialized.
case "$host_os" in
netbsd* | openbsd*)
    # Because /boot is used for the boot block in NetBSD and OpenBSD, use /grub
    # instead of /boot/grub.
    grub_prefix=`echo /burg | sed ${transform}`
    bootdir=${rootdir}
    ;;
*)
    # Use /boot/grub by default.
    bootdir=${rootdir}/boot
    ;;
esac

grubdir=${bootdir}/`echo burg | sed ${transform}`
device_map=${grubdir}/device.map

grub_probe="${grub_probe} --device-map=${device_map}"

# Check if GRUB is installed.
if [ "${target_cpu}-${platform}" = "i386-pc" ] || [ "${target_cpu}-${platform}" = "sparc64-ieee1275" ] ; then
    set $grub_setup dummy
    if test -f "$1"; then
        :
    else
        echo "$1: Not found." 1>&2
        exit 1
    fi
fi

set $grub_mkimage dummy
if test -f "$1"; then
    :
else
    echo "$1: Not found." 1>&2
    exit 1
fi

set $grub_mkdevicemap dummy
if test -f "$1"; then
    :
else
    echo "$1: Not found." 1>&2
    exit 1
fi

# Create the GRUB directory if it is not present.
mkdir -p "$grubdir" || exit 1

# If --recheck is specified, remove the device map, if present.
if test $recheck = yes; then
    rm -f $device_map
fi

# Create the device map file if it is not present.
if test -f "$device_map"; then
    :
else
    # Create a safe temporary file.
    test -n "$mklog" && log_file=`$mklog`

    $grub_mkdevicemap --device-map=$device_map $no_floppy || exit 1
fi

# Make sure that there is no duplicated entry.
tmp=`sed -n '/^([fh]d[0-9]*)/s/\(^(.*)\).*/\1/p' $device_map \
    | sort | uniq -d | sed -n 1p`
if test -n "$tmp"; then
    echo "The drive $tmp is defined multiple times in the device map $device_map" 1>&2
    exit 1
fi

# Copy the GRUB images to the GRUB directory.
for file in ${grubdir}/*.mod ${grubdir}/*.lst ${grubdir}/*.img ${grubdir}/efiemu??.o; do
    if test -f $file && [ "`basename $file`" != menu.lst ]; then
	rm -f $file || exit 1
    fi
done
for file in ${pkglibdir}/*.mod ${pkglibdir}/*.lst; do
    cp -f $file ${grubdir} || exit 1
done
if [ "${target_cpu}-${platform}" = "i386-pc" ] || [ "${target_cpu}-${platform}" = "sparc64-ieee1275" ] ; then
    for file in ${pkglibdir}/*.img ${pkglibdir}/efiemu??.o; do
	if test -f $file; then
	    cp -f $file ${grubdir} || exit 1
	fi
    done
fi

# Copy gettext files
mkdir -p ${grubdir}/locale/
for dir in ${localedir}/*; do
    if test -f "$dir/LC_MESSAGES/grub.mo"; then
        cp -f "$dir/LC_MESSAGES/grub.mo" "${grubdir}/locale/${dir##*/}.mo"
    fi
done

# Write device to a variable so we don't have to traverse /dev every time.
grub_device=`$grub_probe --target=device ${grubdir}` || exit 1

if ! test -f ${grubdir}/burgenv; then
    $grub_editenv ${grubdir}/burgenv create
fi

# Create the core image. First, auto-detect the filesystem module.
fs_module=`$grub_probe --target=fs --device ${grub_device}`
if test "x$fs_module" = x -a "x$modules" = x; then
    echo "Auto-detection of a filesystem module failed." 1>&2
    echo "Please specify the module with the option \`--modules' explicitly." 1>&2
    exit 1
fi

# Then the partition map module.  In order to support partition-less media,
# this command is allowed to fail (--target=fs already grants us that the
# filesystem will be accessible).
partmap_module=
for x in `$grub_probe --target=partmap --device ${grub_device} 2> /dev/null`; do
   partmap_module="$partmap_module part_$x";
done

# Device abstraction module, if any (lvm, raid).
devabstraction_module=`$grub_probe --target=abstraction --device ${grub_device}`

# The order in this list is critical.  Be careful when modifying it.
modules="$modules $disk_module"
modules="$modules $fs_module $partmap_module $devabstraction_module"

relative_grubdir=`make_system_path_relative_to_its_root ${grubdir}` || exit 1
if [ "x${relative_grubdir}" = "x" ] ; then
    relative_grubdir=/
fi

prefix_drive=
config_opt=

if [ "x${devabstraction_module}" = "x" ] ; then
    if [ x"${install_device}" != x ]; then
      if echo "${install_device}" | grep -qx "(.*)" ; then
        install_drive="${install_device}"
      else
        install_drive="`$grub_probe --target=drive --device ${install_device}`" || exit 1
      fi
      install_drive="`echo ${install_drive} | sed -e s/,[0-9]*[a-z]*//g`"
    fi
    grub_drive="`$grub_probe --target=drive --device ${grub_device}`" || exit 1

    # Strip partition number
    grub_drive="`echo ${grub_drive} | sed -e s/,[0-9]*[a-z]*//g`"
    if [ "$disk_module" = ata ] ; then
        # generic method (used on coreboot and ata mod)
        uuid="`$grub_probe --target=fs_uuid --device ${grub_device}`"
        if [ "x${uuid}" = "x" ] ; then
          echo "UUID needed with ata mod, but the filesystem containing ${grubdir} does not support UUIDs." 1>&2
          exit 1
        fi
        echo "search.fs_uuid ${uuid} root " > ${grubdir}/load.cfg
	echo 'set prefix=($root)'"${relative_grubdir}" >> ${grubdir}/load.cfg
	config_opt="-c ${grubdir}/load.cfg "
        modules="$modules search_fs_uuid"
    elif [ "x${grub_drive}" != "x${install_drive}" ] ; then
        uuid="`$grub_probe --target=fs_uuid --device ${grub_device}`"
        if [ "x${uuid}" = "x" ] ; then
          echo "You attempted a cross-disk install, but the filesystem containing ${grubdir} does not support UUIDs." 1>&2
          exit 1
        fi
        echo "search.fs_uuid ${uuid} root " > ${grubdir}/load.cfg
	echo 'set prefix=($root)'"${relative_grubdir}" >> ${grubdir}/load.cfg
	config_opt="-c ${grubdir}/load.cfg "
        modules="$modules search_fs_uuid"
    fi
else
    prefix_drive=`$grub_probe --target=drive --device ${grub_device}` || exit 1
fi

case "${target_cpu}-${platform}" in
    i386-pc) mkimage_target=i386-pc ;;
    sparc64-ieee1275) mkimage_target=sparc64-ieee1275-raw ;;
    mips-yeeloong) mkimage_target=mipsel-yeeloong-elf ;;
    *) mkimage_target=i386-coreboot;
esac

if [ "${target_cpu}-${platform}" = "i386-pc" ] || [ "${target_cpu}-${platform}" = "sparc64-ieee1275" ] ; then
    $grub_mkimage ${config_opt} -O ${mkimage_target} --output=${grubdir}/core.img --prefix=${prefix_drive}${relative_grubdir} $modules || exit 1

    # Now perform the installation.
    $grub_setup ${setup_verbose} ${setup_force} ${setup_alt} --directory=${grubdir} --device-map=${device_map} \
        ${install_device} || exit 1
elif [ "${target_cpu}-${platform}" = "mips-yeeloong" ] ; then
    $grub_mkimage ${config_opt} -f ${font} -d ${pkglibdir} -O ${mkimage_target} --output=/boot/burg.elf --prefix=${prefix_drive}${relative_grubdir} $modules || exit 1
else
    $grub_mkimage -O ${mkimage_target} ${config_opt} -d ${pkglibdir} --output=/boot/multiboot.img --prefix=${prefix_drive}${relative_grubdir} $modules || exit 1
fi

echo "Installation finished. No error reported."

# Bye.
exit 0
